{"version":"2.1.0","runs":[{"invocations":[{"executionSuccessful":true,"toolExecutionNotifications":[{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line src/configInterface.cpp:152:\n `;` was unexpected"}},{"descriptor":{"id":"Syntax error"},"level":"warning","message":{"text":"Syntax error at line src/relay.h:68:\n `;` was unexpected"}}]}],"results":[{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":58,"endLine":252,"snippet":{"text":"    memcpy(buffer, &option, sizeof(struct dhcpv6_option));"},"startColumn":5,"startLine":252}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":67,"endLine":253,"snippet":{"text":"    memcpy(buffer + sizeof(struct dhcpv6_option), msg, msg_length);"},"startColumn":5,"startLine":253}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":74,"endLine":442,"snippet":{"text":"    memcpy(&new_message.peer_address, &ip_hdr->ip6_src, sizeof(in6_addr));"},"startColumn":5,"startLine":442}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":89,"endLine":445,"snippet":{"text":"    memcpy(&new_message.link_address, &config->link_address.sin6_addr, sizeof(in6_addr));"},"startColumn":5,"startLine":445}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":76,"endLine":446,"snippet":{"text":"    memcpy(current_buffer_position, &new_message, sizeof(dhcpv6_relay_msg));"},"startColumn":5,"startLine":446}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":82,"endLine":455,"snippet":{"text":"        memcpy(current_buffer_position, &option79, sizeof(linklayer_addr_option));"},"startColumn":9,"startLine":455}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":97,"endLine":458,"snippet":{"text":"        memcpy(current_buffer_position, &ether_hdr->ether_shost, sizeof(ether_hdr->ether_shost));"},"startColumn":9,"startLine":458}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":130,"endLine":501,"snippet":{"text":"                memcpy(current_buffer_position, ((uint8_t *)option) + sizeof(struct dhcpv6_option), ntohs(option->option_length));"},"startColumn":17,"startLine":501}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":94,"endLine":510,"snippet":{"text":"    memcpy(&target_addr.sin6_addr, &dhcp_relay_header->peer_address, sizeof(struct in6_addr));"},"startColumn":5,"startLine":510}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":534,"snippet":{"text":"    int32_t len = recv(config->filter, message_buffer, 4096, 0);"},"startColumn":19,"startLine":534}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":64,"endLine":534,"snippet":{"text":"    int32_t len = recv(config->filter, message_buffer, 4096, 0);"},"startColumn":19,"startLine":534}}}],"message":{"text":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-signed-unsigned-conversion"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":594,"snippet":{"text":"    if ((data = recvfrom(config->local_sock, message_buffer, 4096, 0, (sockaddr *)&from, &len)) == -1) {"},"startColumn":17,"startLine":594}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":95,"endLine":594,"snippet":{"text":"    if ((data = recvfrom(config->local_sock, message_buffer, 4096, 0, (sockaddr *)&from, &len)) == -1) {"},"startColumn":17,"startLine":594}}}],"message":{"text":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-signed-unsigned-conversion"},{"fingerprints":{"matchBasedId/v1":"requires login"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"src/relay.cpp","uriBaseId":"%SRCROOT%"},"region":{"endColumn":54,"endLine":716,"snippet":{"text":"        filter = sock_open(index, &ether_relay_fprog);"},"startColumn":18,"startLine":716}}}],"message":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"properties":{},"ruleId":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"}],"tool":{"driver":{"name":"Semgrep OSS","rules":[{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command."},"help":{"markdown":"The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/78](https://cwe.mitre.org/data/definitions/78)\n - [https://cwe.mitre.org/data/definitions/88](https://cwe.mitre.org/data/definitions/88)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n","text":"The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-command-injection","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-command-injection","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-command-injection"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The software calls free() twice on the same memory address, potentially  leading to memory corruption. This corruption can cause the program to  crash or cause two later calls to malloc() to return the same pointer."},"help":{"markdown":"The software calls free() twice on the same memory address, potentially  leading to memory corruption. This corruption can cause the program to  crash or cause two later calls to malloc() to return the same pointer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/415](https://cwe.mitre.org/data/definitions/415)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n - [https://dustri.org/b/playing-with-weggli.html](https://dustri.org/b/playing-with-weggli.html)\n","text":"The software calls free() twice on the same memory address, potentially  leading to memory corruption. This corruption can cause the program to  crash or cause two later calls to malloc() to return the same pointer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-double-free","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-double-free","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-double-free"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems."},"help":{"markdown":"The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/134](https://cwe.mitre.org/data/definitions/134)\n - [https://julianor.tripod.com/bc/formatstring-1.2.pdf](https://julianor.tripod.com/bc/formatstring-1.2.pdf)\n - [http://phrack.org/issues/70/13.html#article](http://phrack.org/issues/70/13.html#article)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n","text":"The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-format-string-bugs","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-format-string-bugs","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-format-string-bugs"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A compromised process might be able to regain elevated group privileges if set(e)gid() is called after set(e)uid(). A similar case is when  privileges are temporarily dropped with seteuid() and then setuid() or  seteuid() are called from while under unprivileged user."},"help":{"markdown":"A compromised process might be able to regain elevated group privileges if set(e)gid() is called after set(e)uid(). A similar case is when  privileges are temporarily dropped with seteuid() and then setuid() or  seteuid() are called from while under unprivileged user.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/696](https://cwe.mitre.org/data/definitions/696)\n - [https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf](https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n","text":"A compromised process might be able to regain elevated group privileges if set(e)gid() is called after set(e)uid(). A similar case is when  privileges are temporarily dropped with seteuid() and then setuid() or  seteuid() are called from while under unprivileged user."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-order-setuid-setgid-etc","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-order-setuid-setgid-etc","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-order-setuid-setgid-etc"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code."},"help":{"markdown":"Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/697](https://cwe.mitre.org/data/definitions/697)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-unsigned-comparison","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-unsigned-comparison","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-unsigned-comparison"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The software calls free() on a pointer to memory that has a short  lifetime and was not allocated using associated heap allocation  functions such as malloc(), calloc(), or realloc()."},"help":{"markdown":"The software calls free() on a pointer to memory that has a short  lifetime and was not allocated using associated heap allocation  functions such as malloc(), calloc(), or realloc().\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/shellphish/how2heap/blob/master/glibc_2.23/house_of_spirit.c](https://github.com/shellphish/how2heap/blob/master/glibc_2.23/house_of_spirit.c)\n","text":"The software calls free() on a pointer to memory that has a short  lifetime and was not allocated using associated heap allocation  functions such as malloc(), calloc(), or realloc()."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-free","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-free","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-free"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The invocation of memset() is easy to get wrong. The second argument is the character and the third argument is the size, but sometimes these arguments are in the wrong order. This results in a no-op."},"help":{"markdown":"The invocation of memset() is easy to get wrong. The second argument is the character and the third argument is the size, but sometimes these arguments are in the wrong order. This results in a no-op.\n\n<b>References:</b>\n - [https://lkml.org/lkml/2009/11/11/336](https://lkml.org/lkml/2009/11/11/336)\n - [https://bugs.mysql.com/bug.php?id=23181](https://bugs.mysql.com/bug.php?id=23181)\n","text":"The invocation of memset() is easy to get wrong. The second argument is the character and the third argument is the size, but sometimes these arguments are in the wrong order. This results in a no-op."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-memset","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-memset","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-memset"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated."},"help":{"markdown":"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/467](https://cwe.mitre.org/data/definitions/467)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://dustri.org/b/playing-with-weggli.html](https://dustri.org/b/playing-with-weggli.html)\n","text":"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-sizeof","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-sizeof","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-sizeof"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"C standards specify that the results are undefined if a call to sprintf(), snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between objects that overlap (e.g., if the target string array and one of the supplied input arguments refer to the same buffer)."},"help":{"markdown":"C standards specify that the results are undefined if a call to sprintf(), snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between objects that overlap (e.g., if the target string array and one of the supplied input arguments refer to the same buffer).\n\n<b>References:</b>\n - [https://linux.die.net/man/3/sprintf](https://linux.die.net/man/3/sprintf)\n","text":"C standards specify that the results are undefined if a call to sprintf(), snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between objects that overlap (e.g., if the target string array and one of the supplied input arguments refer to the same buffer)."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-sprintf-snprintf","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-sprintf-snprintf","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-sprintf-snprintf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The strncat() function is nearly as dangerous as strcat(), in that it's quite easy to misuse. The first common mistake is supplying the size of  the entire buffer instead of the size remaining in the buffer. A more  subtle mistake can be made: the size parameter needs to be the amount of space left in the buffer less one; otherwise, the NUL byte is written  one byte past the end of the buffer."},"help":{"markdown":"The strncat() function is nearly as dangerous as strcat(), in that it's quite easy to misuse. The first common mistake is supplying the size of  the entire buffer instead of the size remaining in the buffer. A more  subtle mistake can be made: the size parameter needs to be the amount of space left in the buffer less one; otherwise, the NUL byte is written  one byte past the end of the buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/787](https://cwe.mitre.org/data/definitions/787)\n - [https://cwe.mitre.org/data/definitions/193](https://cwe.mitre.org/data/definitions/193)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"The strncat() function is nearly as dangerous as strcat(), in that it's quite easy to misuse. The first common mistake is supplying the size of  the entire buffer instead of the size remaining in the buffer. A more  subtle mistake can be made: the size parameter needs to be the amount of space left in the buffer less one; otherwise, the NUL byte is written  one byte past the end of the buffer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-strncat","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-strncat","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-strncat"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer."},"help":{"markdown":"The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/806](https://cwe.mitre.org/data/definitions/806)\n - [https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt](https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt)\n - [https://dustri.org/b/playing-with-weggli.html](https://dustri.org/b/playing-with-weggli.html)\n","text":"The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state."},"help":{"markdown":"The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/367](https://cwe.mitre.org/data/definitions/367)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-access-stat-lstat","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-access-stat-lstat","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-access-stat-lstat"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."},"help":{"markdown":"Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/1325](https://cwe.mitre.org/data/definitions/1325)\n - [https://nullprogram.com/blog/2019/10/28/](https://nullprogram.com/blog/2019/10/28/)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n","text":"Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-alloca","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-alloca","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-alloca"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The gets() function is always unsafe because it does not perform bounds  checking on the size of its input. An attacker can easily send  arbitrarily-sized input to gets() and overflow the destination buffer."},"help":{"markdown":"The gets() function is always unsafe because it does not perform bounds  checking on the size of its input. An attacker can easily send  arbitrarily-sized input to gets() and overflow the destination buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/242](https://cwe.mitre.org/data/definitions/242)\n - [https://cwe.mitre.org/data/definitions/120](https://cwe.mitre.org/data/definitions/120)\n","text":"The gets() function is always unsafe because it does not perform bounds  checking on the size of its input. An attacker can easily send  arbitrarily-sized input to gets() and overflow the destination buffer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-gets","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-gets","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-gets"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Creating and using insecure temporary files can leave application and system data vulnerable to attack."},"help":{"markdown":"Creating and using insecure temporary files can leave application and system data vulnerable to attack.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/377](https://cwe.mitre.org/data/definitions/377)\n - [https://cwe.mitre.org/data/definitions/367](https://cwe.mitre.org/data/definitions/367)\n","text":"Creating and using insecure temporary files can leave application and system data vulnerable to attack."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-mktemp-tmpnam-tempnam","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-mktemp-tmpnam-tempnam","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-mktemp-tmpnam-tempnam"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended."},"help":{"markdown":"The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/338](https://cwe.mitre.org/data/definitions/338)\n - [https://cwe.mitre.org/data/definitions/330](https://cwe.mitre.org/data/definitions/330)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n","text":"The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-rand-srand","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-rand-srand","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-rand-srand"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer."},"help":{"markdown":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/120](https://cwe.mitre.org/data/definitions/120)\n - [https://cwe.mitre.org/data/definitions/787](https://cwe.mitre.org/data/definitions/787)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-scanf-etc","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-scanf-etc","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-scanf-etc"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."},"help":{"markdown":"The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/364](https://cwe.mitre.org/data/definitions/364)\n - [https://cwe.mitre.org/data/definitions/479](https://cwe.mitre.org/data/definitions/479)\n - [https://cwe.mitre.org/data/definitions/828](https://cwe.mitre.org/data/definitions/828)\n","text":"The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-signal","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-signal","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-signal"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer."},"help":{"markdown":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/120](https://cwe.mitre.org/data/definitions/120)\n - [https://cwe.mitre.org/data/definitions/787](https://cwe.mitre.org/data/definitions/787)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-sprintf-vsprintf","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-sprintf-vsprintf","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-sprintf-vsprintf"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer."},"help":{"markdown":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/676](https://cwe.mitre.org/data/definitions/676)\n - [https://cwe.mitre.org/data/definitions/120](https://cwe.mitre.org/data/definitions/120)\n - [https://cwe.mitre.org/data/definitions/787](https://cwe.mitre.org/data/definitions/787)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-strcpy-stpcpy-strcat","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-strcpy-stpcpy-strcat","properties":{"precision":"very-high","tags":["HIGH CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-insecure-api-strcpy-stpcpy-strcat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state."},"help":{"markdown":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/197](https://cwe.mitre.org/data/definitions/197)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n","text":"Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-integer-truncation","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-integer-truncation","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-integer-truncation"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control."},"help":{"markdown":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/190](https://cwe.mitre.org/data/definitions/190)\n - [https://cwe.mitre.org/data/definitions/128](https://cwe.mitre.org/data/definitions/128)\n - [https://cwe.mitre.org/data/definitions/131](https://cwe.mitre.org/data/definitions/131)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n - [https://dustri.org/b/playing-with-weggli.html](https://dustri.org/b/playing-with-weggli.html)\n","text":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-integer-wraparound","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-integer-wraparound","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-integer-wraparound"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"help":{"markdown":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.\n\n<b>References:</b>\n - [https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java](https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java)\n - [https://github.com/x509cert/banned/blob/master/banned.h](https://github.com/x509cert/banned/blob/master/banned.h)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement](https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement)\n","text":"Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-interesting-api-calls"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value."},"help":{"markdown":"The software calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/193](https://cwe.mitre.org/data/definitions/193)\n - [https://cwe.mitre.org/data/definitions/787](https://cwe.mitre.org/data/definitions/787)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n","text":"The software calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-off-by-one","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-off-by-one","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-off-by-one"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk."},"help":{"markdown":"The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/469](https://cwe.mitre.org/data/definitions/469)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n","text":"The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-pointer-subtraction","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-pointer-subtraction","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-pointer-subtraction"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."},"help":{"markdown":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n","text":"The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-signed-unsigned-conversion","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-signed-unsigned-conversion","properties":{"precision":"very-high","tags":["LOW CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-signed-unsigned-conversion"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."},"help":{"markdown":"Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n","text":"Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-suspicious-assert","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-suspicious-assert","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-suspicious-assert"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions."},"help":{"markdown":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/252](https://cwe.mitre.org/data/definitions/252)\n - [https://cwe.mitre.org/data/definitions/690](https://cwe.mitre.org/data/definitions/690)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n","text":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-malloc-calloc-realloc","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-malloc-calloc-realloc","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-malloc-calloc-realloc"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions."},"help":{"markdown":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/252](https://cwe.mitre.org/data/definitions/252)\n - [https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/](https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/)\n","text":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-scanf-etc","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-scanf-etc","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-scanf-etc"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. If the program calls a function to drop privileges but  does not check the return code to ensure that privileges were  successfully dropped, then the program will continue to operate with  the higher privileges."},"help":{"markdown":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. If the program calls a function to drop privileges but  does not check the return code to ensure that privileges were  successfully dropped, then the program will continue to operate with  the higher privileges.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/252](https://cwe.mitre.org/data/definitions/252)\n - [https://lwn.net/Articles/451985/](https://lwn.net/Articles/451985/)\n - [https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf](https://www.usenix.org/legacy/events/sec02/full_papers/chen/chen.pdf)\n - [https://www.openwall.com/lists/oss-security/2023/12/30/4](https://www.openwall.com/lists/oss-security/2023/12/30/4)\n","text":"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. If the program calls a function to drop privileges but  does not check the return code to ensure that privileges were  successfully dropped, then the program will continue to operate with  the higher privileges."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-setuid-seteuid","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-setuid-seteuid","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unchecked-ret-setuid-seteuid"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The snprintf() and vsnprintf() functions return the total length of the string they tried to create. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur."},"help":{"markdown":"The snprintf() and vsnprintf() functions return the total length of the string they tried to create. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur.\n\n<b>References:</b>\n - [https://lwn.net/Articles/507319/](https://lwn.net/Articles/507319/)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://dustri.org/b/playing-with-weggli.html](https://dustri.org/b/playing-with-weggli.html)\n","text":"The snprintf() and vsnprintf() functions return the total length of the string they tried to create. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-ret-snprintf-vsnprintf","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-ret-snprintf-vsnprintf","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-ret-snprintf-vsnprintf"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The strlcpy() and strlcat() functions return the total length of the string they tried to create. For strlcpy() that means the length of the source string. For strlcat() that means the initial length of the destination string plus the length of of the source string. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur."},"help":{"markdown":"The strlcpy() and strlcat() functions return the total length of the string they tried to create. For strlcpy() that means the length of the source string. For strlcat() that means the initial length of the destination string plus the length of of the source string. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur.\n\n<b>References:</b>\n - [https://lwn.net/Articles/507319/](https://lwn.net/Articles/507319/)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n","text":"The strlcpy() and strlcat() functions return the total length of the string they tried to create. For strlcpy() that means the length of the source string. For strlcat() that means the initial length of the destination string plus the length of of the source string. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-ret-strlcpy-strlcat","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-ret-strlcpy-strlcat","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-ret-strlcpy-strlcat"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. When influenced by the size of an  input it is often easier to overflow a short than an int."},"help":{"markdown":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. When influenced by the size of an  input it is often easier to overflow a short than an int.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/190](https://cwe.mitre.org/data/definitions/190)\n - [https://cwe.mitre.org/data/definitions/680](https://cwe.mitre.org/data/definitions/680)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n","text":"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. When influenced by the size of an  input it is often easier to overflow a short than an int."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-strlen","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-strlen","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unsafe-strlen"}},{"defaultConfiguration":{"level":"warning"},"fullDescription":{"text":"If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition."},"help":{"markdown":"If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/170](https://cwe.mitre.org/data/definitions/170)\n - [https://cwe.mitre.org/data/definitions/126](https://cwe.mitre.org/data/definitions/126)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n","text":"If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unterminated-string-strncpy-stpncpy","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-unterminated-string-strncpy-stpncpy","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-unterminated-string-strncpy-stpncpy"}},{"defaultConfiguration":{"level":"error"},"fullDescription":{"text":"The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory."},"help":{"markdown":"The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory.\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/416](https://cwe.mitre.org/data/definitions/416)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n","text":"The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory."},"id":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-use-after-free","name":"Users.raptor.Downloads.github.semgrep-rules.c.raptor-use-after-free","properties":{"precision":"very-high","tags":["MEDIUM CONFIDENCE"]},"shortDescription":{"text":"Semgrep Finding: Users.raptor.Downloads.github.semgrep-rules.c.raptor-use-after-free"}}],"semanticVersion":"1.132.0"}}}],"$schema":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json"}
